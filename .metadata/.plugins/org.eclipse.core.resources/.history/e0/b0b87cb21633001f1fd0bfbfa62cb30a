package com.operations;

public class CircularLinkedList implements LinkedList {
	class Node{
		int data;
		Node next;
	}
	
	Node head;
	public CircularLinkedList() {
		this.head = null;
	}

	@Override
	public void insertionAtFront(int data) {
		Node newNode = new Node();
		newNode.data = data;
		
		if(isEmpty()) {
			head = newNode;
			newNode.next = head;
			return;
		}
		
		Node temp = head;
		while(temp.next != head) {
			temp = temp.next;
		}
		
		newNode.next = head;
		temp.next = newNode;
		head = newNode;

	}

	@Override
	public void insertionAtEnd(int data) {
		Node newNode = new Node();
		newNode.data = data;
		
		if(isEmpty()) {
			head = newNode;
			newNode.next = head;
			return;
		}
		
		Node temp = head;
		while(temp.next != head) {
			temp = temp.next;
		}
		
		temp.next = newNode;
		newNode.next = head;

	}

	@Override
	public void deleteFromFront() {
		if(isEmpty()) {
			System.out.println("List is Empty");
			return;
		}
		
		Node temp = head;
		while(temp.next != head) {
			temp = temp.next;
		}
		
		head = head.next;
		temp.next = head;

	}

	@Override
	public void deleteFromEnd() {
		if(isEmpty()) {
			System.out.println("List is Empty");
			return;
		}
		
		Node temp = head;
		while(temp.next.next != head) {
			temp = temp.next;
		}
		
		temp.next = head;

	}
	
	@Override
	public void remove(int data) {
		Node temp = head;
		while(temp.next != head) {
			if(temp.data == data) {
				break;
			}
			temp = temp.next;
		}
		
	}

	@Override
	public void display() {
		Node temp = head;
		while(temp.next != head) {
			System.out.print(temp.data + " ");
			temp = temp.next;
		}
		System.out.print(temp.data + " ");
		System.out.println();
	}

	@Override
	public boolean isEmpty() {
		if(head==null) {
			return true;
		}
		return false;
	}

	

}
